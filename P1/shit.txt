class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BinaryTree {
  constructor() {
    this.root = null;
    this.insertOrder = []; // Para armazenar a ordem de inserção
  }

  // Método para inserir um novo valor
  insert(value) {
    const newNode = new Node(value);
    if (this.root === null) {
      this.root = newNode; // Se a árvore estiver vazia, o novo nó é a raiz
    } else {
      this.insertNode(this.root, newNode); // Caso contrário, insere o nó de forma recursiva
    }
    this.insertOrder.push(value); // Adiciona o valor à ordem de inserção
  }

  // Método recursivo para inserir o nó
  insertNode(node, newNode) {
    if (newNode.value < node.value) {
      if (node.left === null) {
        node.left = newNode;
      } else {
        this.insertNode(node.left, newNode); // Recursão para o lado esquerdo
      }
    } else {
      if (node.right === null) {
        node.right = newNode;
      } else {
        this.insertNode(node.right, newNode); // Recursão para o lado direito
      }
    }
  }

  // Método para remover um nó
  remove(value) {
    this.root = this.removeNode(this.root, value);
  }

  // Método recursivo para remover o nó
  removeNode(node, value) {
    if (node === null) {
      return null; // Se o nó não existir, retorna null
    }

    // Se o valor a ser removido é menor que o valor do nó atual, vai para o lado esquerdo
    if (value < node.value) {
      node.left = this.removeNode(node.left, value);
      return node;
    }

    // Se o valor a ser removido é maior que o valor do nó atual, vai para o lado direito
    if (value > node.value) {
      node.right = this.removeNode(node.right, value);
      return node;
    }

    // Caso 1: O nó a ser removido não tem filhos (é uma folha)
    if (node.left === null && node.right === null) {
      return null;
    }

    // Caso 2: O nó a ser removido tem apenas um filho
    if (node.left === null) {
      return node.right; // Retorna o filho à direita
    }
    if (node.right === null) {
      return node.left; // Retorna o filho à esquerda
    }

    // Caso 3: O nó a ser removido tem dois filhos
    // Encontramos o valor mínimo da subárvore direita
    const minRight = this.findMin(node.right);
    node.value = minRight.value; // Substituímos o valor do nó pelo valor mínimo da subárvore direita

    // Removemos o valor mínimo da subárvore direita
    node.right = this.removeNode(node.right, minRight.value);

    return node;
  }

  // Método para encontrar o nó com o valor mínimo
  findMin(node) {
    while (node.left !== null) {
      node = node.left;
    }
    return node;
  }

  // Método para exibir a árvore em ordem (in-order)
  inOrder(node = this.root) {
    if (node !== null) {
      this.inOrder(node.left); // Visita o filho esquerdo
      console.log(node.value);  // Visita o nó atual
      this.inOrder(node.right); // Visita o filho direito
    }
  }

  // Método para exibir a ordem de inserção dos valores
  showInsertionOrder() {
    console.log("Ordem de inserção dos valores:", this.insertOrder.join(", "));
  }

  // Método para exibir a árvore de forma visual (hierárquica)
  printTree(node = this.root, space = 0, count = 5) {
    if (node === null) return;

    // Aumenta o espaço à medida que desce pela árvore
    space += count;

    // Primeiro, imprime o filho direito (mais distante)
    this.printTree(node.right, space);

    // Imprime o valor do nó com indentação
    console.log();
    for (let i = count; i < space; i++) {
      process.stdout.write(" "); // Adiciona espaços para mostrar a árvore
    }
    console.log(node.value);

    // Agora, imprime o filho esquerdo
    this.printTree(node.left, space);
  }
}

// Exemplo de uso da Árvore Binária
const tree = new BinaryTree();
tree.insert(50);
tree.insert(30);
tree.insert(70);
tree.insert(20);
tree.insert(40);
tree.insert(60);
tree.insert(80);

console.log("Árvore Binária:");
tree.inOrder(); // Exibe a árvore em ordem antes da remoção

// Remover um nó (por exemplo, o nó com valor 70)
tree.remove(70);

console.log("\nÁrvore após remover o valor 70:");
tree.inOrder(); // Exibe a árvore em ordem após a remoção

// Exibir a árvore visualmente
console.log("\nÁrvore Visual após a remoção:");
tree.printTree();
